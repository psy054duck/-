
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

.scenegraph.io.state.com.sun.j3d.utils.geometry.PrimitiveState;

mport java.util.*;
import callgraph.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class OberonParser extends java_cup.runtime.lr_parser {

rivaprivate Stack<Scope> scopeStack;te Procedure procedure
    ;lic final Class g
  return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public OberonParser() {super();}

structor which sets the d
        scopeStack = new Stack<>();e
        fault scanner. */
  @Deprecated
  public OberonParser(java_cup.runtime.Scanner s) {super(s);}

        module();er. */
  public OberonParser(java
        _cup.runtim
        module.show();e.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000
            if (res == "") {
           lookahead.getType() ; res = sym.terminalNames[loo]
            }\137\000\002\002\012\000\002\00
\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\007\005" +
    "\000\002\007\002\000\002\010\007\000\002\010\005\000" +
    "\002\005\004\000\002\005\002\000\002\011\007\000\002" +
    "\011\006\000\002\012\004\000\002\012\002\000\002\013" +
    "\007\000\002\013\006\000\002\014\005\000\002\014\002" +
    "\000\
 System.out.println(lookahead);           002\015\005\000\002\016\006\000\002\017\005\000" +
    "\002\055\005\000\002\055\002\000\002\054\003\000\002" +
    "\054\005\000\002\054\002\000\002\053\006\000\002\053" +
    "\005\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\060\006\000\002\020\005\000\002\020\002\000" +
    "\002\021\005\000\002\021\002\000\002\057\006\000\002" +
    "\051\004\000\002\056\005\000\002\056\002\000\002\022" +
    "\004\000\002\023\005\000\002\023\002\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\002\000\002\025\007\000\002\006\011\000\002" +
    "\027\007\000\002\027\002\000\002\026\004\000\002\026" +
    "\002\000\002\030\004\000\002\030\003\000\002\031\005" +
    "\000\002\032\006\000\002\033\004\000\002\034\004\000" +
    "\002\034\002\000\002\035\005\000\002\035\002\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\004" +
    "\000\002\037\002\000\002\040\003\000\002\040\003\000" +
    "\002\040\002\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\043\005\000\002\044\005" +
    "\000\002\044\002\000\002\045\005\000\002\045\003\000" +
    "\002\046\004\000\002\046\003\000\002\046\005\000\002" +
    "\046\004\000\002\047\003\000\002\050\005\000\002\050" +
    "\006\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\020\004\001\002\000\004\052\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\031\010\001\002\000\022\010\ufffb\011\ufffb\012" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\022\012\052\ufffb\001\002" +
    "\000\020\010\ufff7\011\166\012\ufff7\016\160\017\ufff7\021" +
    "\ufff7\052\163\001\002\000\004\052\150\001\002\000\006" +
    "\010\ufffe\017\015\001\002\000\004\010\144\001\002\000" +
    "\014\004\020\010\uffd1\014\016\031\uffd1\052\022\001\002" +
    "\000\016\026\037\027\040\033\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\001\002\000\012\005\uffd5\006\uffd5\010\uffd5\031\uffd5" +
    "\001\002\000\016\026\037\027\040\033\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\001\002\000\012\005\uffd6\006\uffd6\010\uffd6" +
    "\031\120\001\002\000\022\005\uffc9\006\uffc9\010\uffc9\031" +
    "\uffc9\033\030\035\031\037\033\047\uffa3\001\002\000\012" +
    "\005\uffd4\006\uffd4\010\uffd4\031\uffd4\001\002\000\012\005" +
    "\uffd2\006\uffd2\010\uffd2\031\uffd2\001\002\000\012\005\uffd3" +
    "\006\uffd3\010\uffd3\031\uffd3\001\002\000\004\010\uffff\001" +
    "\002\000\004\047\115\001\002\000\020\026\037\027\040" +
    "\033\uffb7\034\uffc4\051\uffb7\052\uffb7\053\uffb7\001\002\000" +
    "\016\026\037\027\040\033\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\001\002\000\012\005\uffca\006\uffca\010\uffca\031\uffca\001" +
    "\002\000\004\052\034\001\002\000\070\005\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\013\uffa3\015\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3" +
    "\035\031\036\uffa3\037\033\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3\001\002" +
    "\000\064\005\uffa5\006\uffa5\007\uffa5\010\uffa5\013\uffa5\015" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\034\uffa5\036\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5" +
    "\001\002\000\012\033\057\051\060\052\064\053\056\001" +
    "\002\000\012\033\uffb9\051\uffb9\052\uffb9\053\uffb9\001\002" +
    "\000\012\033\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002\000" +
    "\044\005\uffba\006\uffba\007\uffba\010\uffba\013\uffba\015\uffba" +
    "\031\uffba\032\uffba\034\uffba\036\uffba\041\045\042\053\043" +
    "\046\044\051\045\050\046\052\052\uffba\001\002\000\004" +
    "\036\043\001\002\000\070\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\013\uffa3\015\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3\035\031\036" +
    "\uffa3\037\033\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\052\uffa3\001\002\000\064\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\013\uffa4\015\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\034\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\052\uffa4\001\002\000" +
    "\016\026\uffc1\027\uffc1\033\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\001\002\000\016\026\uffbf\027\uffbf\033\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\016\026\037\027\040\033\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\001\002\000\016\026\uffbd\027" +
    "\uffbd\033\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000\016" +
    "\026\uffbe\027\uffbe\033\uffbe\051\uffbe\052\uffbe\053\uffbe\001" +
    "\002\000\016\026\uffbc\027\uffbc\033\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\001\002\000\016\026\uffc0\027\uffc0\033\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\001\002\000\030\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\013\uffc6\015\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\036\uffc6\052\uffc6\001\002\000\030\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\013\uffbb\015\uffbb\031\uffbb\032\uffbb\034" +
    "\uffbb\036\uffbb\052\uffbb\001\002\000\062\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\013\uffa6\015\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6" +
    "\036\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\052\uffa6\001\002\000\016\026\037\027\040" +
    "\033\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\012\033" +
    "\057\051\060\052\064\053\056\001\002\000\052\005\uffad" +
    "\006\uffad\007\uffad\010\uffad\013\uffad\015\uffad\025\077\026" +
    "\075\027\076\031\uffad\032\uffad\034\uffad\036\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\052\uffad\001" +
    "\002\000\062\005\uffab\006\uffab\007\uffab\010\uffab\013\uffab" +
    "\015\uffab\023\067\024\071\025\uffab\026\uffab\027\uffab\030" +
    "\072\031\uffab\032\uffab\034\uffab\036\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\050\070\052\uffab\001" +
    "\002\000\062\005\uffa9\006\uffa9\007\uffa9\010\uffa9\013\uffa9" +
    "\015\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\034\uffa9\036\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\052\uffa9\001" +
    "\002\000\066\005\uffa3\006\uffa3\007\uffa3\010\uffa3\013\uffa3" +
    "\015\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\035\031\036\uffa3\037\033" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050" +
    "\uffa3\052\uffa3\001\002\000\062\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\013\uffaa\015\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\036\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\050" +
    "\uffaa\052\uffaa\001\002\000\012\033\057\051\060\052\064" +
    "\053\056\001\002\000\012\033\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\001\002\000\012\033\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\001\002\000\012\033\uffb2\051\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\012\033\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002" +
    "\000\052\005\uffac\006\uffac\007\uffac\010\uffac\013\uffac\015" +
    "\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032\uffac\034\uffac" +
    "\036\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\052\uffac\001\002\000\044\005\uffaf\006\uffaf\007\uffaf" +
    "\010\uffaf\013\uffaf\015\uffaf\031\uffaf\032\uffaf\034\uffaf\036" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\052\uffaf\001\002\000\012\033\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\001\002\000\012\033\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\001\002\000\012\033\uffb4\051\uffb4\052\uffb4\053\uffb4\001" +
    "\002\000\012\033\057\051\060\052\064\053\056\001\002" +
    "\000\052\005\uffad\006\uffad\007\uffad\010\uffad\013\uffad\015" +
    "\uffad\025\077\026\075\027\076\031\uffad\032\uffad\034\uffad" +
    "\036\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\052\uffad\001\002\000\044\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\013\uffae\015\uffae\031\uffae\032\uffae\034\uffae\036" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\052\uffae\001\002\000\062\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\013\uffa7\015\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\036\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\05\001\002\000\004\034\105\001\002\000\062\005" +
    "\uffa8\006\uffa8\007\uffa8\010\u
        module = new Module(res);ffa8\013\uffa8\015\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\034\uffa8\036\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\050\uffa8\052\uffa8\001\002\000\004\034" +
    "\114\001\002\000\006\032\110\034\uffc2\001\002\000\016" +
    "\026\037\027\040\033\uffb7\051\uffb7\052\uffb7\053\uffb7\001" +
    "\002\000\004\034\uffc5\001\002\000\006\032\110\034\uffc2" +
    "\001\002\000\004\034\uffc3\001\002\000\012\005\uffc8\006" +
    "\uffc8\010\uffc8\031\uffc8\001\002\000\016\026\037\027\040" +
    "\033\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\012\005" +
    "\uffc7\006\uffc7\010\uffc7\031\uffc7\001\002\000\010\005\uffd8" +
    "\006\uffd8\010\uffd8\001\002\000\020\004\020\005\uffd1\006" +
    "\uffd1\010\uffd1\014\016\031\uffd1\052\022\001\002\000\012" +
    "\005\uffd6\006\uffd6\010\uffd6\031\120\001\002\000\010\005" +
    "\uffd7\006\uffd7\010\uffd7\001\002\000\004\007\124\001\002" +
    "\000\020\004\020\005\uffd1\006\uffd1\010\uffd1\014\016\031" +
    "\uffd1\052\022\001\002\000\010\005\uffcd\006\127\010\uffcd" +
    "\001\002\000\006\005\134\010\uffcb\001\002\000\016\026" +
    "\037\027\040\033\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002" +
    "\000\004\007\131\001\002\000\020\004\020\005\uffd1\006" +
    "\uffd1\010\uffd1\014\016\031\uffd1\052\022\001\002\000\010" +
    "\005\uffcd\006\127\010\uffcd\001\002\000\006\005\uffce\010" +
    "\uffce\001\002\000\014\004\020\010\uffd1\014\016\031\uffd1" +
    "\052\022\001\002\000\004\010\136\001\002\000\012\005" +
    "\uffcf\006\uffcf\010\uffcf\031\uffcf\001\002\000\004\010\uffcc" +
    "\001\002\000\004\015\141\001\002\000\014\004\020\010" +
    "\uffd1\014\016\031\uffd1\052\022\001\002\000\004\010\143" +
    "\001\002\000\012\005\uffd0\006\uffd0\010\uffd0\031\uffd0\001" +
    "\002\000\004\052\145\001\002\000\004\037\146\001\002" +
    "\000\004\002\001\001\002\000\006\031\153\052\154\001" +
    "\002\000\004\041\151\001\002\000\016\026\037\027\040" +
    "\033\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\006\031" +
    "\ufff9\052\ufff9\001\002\000\020\010\ufffc\011\ufffc\012\ufffc" +
    "\016\ufffc\017\ufffc\021\ufffc\052\ufffc\001\002\000\004\041" +
    "\155\001\002\000\016\026\037\027\040\033\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\004\031\157\001\002\000" +
    "\006\031\ufffa\052\ufffa\001\002\000\010\010\uffdf\031\uffdf" +
    "\052\230\001\002\000\012\010\ufff3\012\203\017\ufff3\021" +
    "\ufff3\001\002\000\004\052\172\001\002\000\012\010\uffe4" +
    "\031\uffe4\034\uffe4\052\uffe4\001\002\000\012\010\uffe2\031" +
    "\uffe2\034\uffe2\052\uffe2\001\002\000\012\010\uffe3\031\uffe3" +
    "\034\uffe3\052\uffe3\001\002\000\016\026\037\027\040\033" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\004\013\170" +
    "\001\002\000\010\011\166\016\160\052\163\001\002\000" +
    "\012\010\uffdc\031\uffdc\034\uffdc\052\uffdc\001\002\000\004" +
    "\041\200\001\002\000\014\010\ufff8\012\ufff8\017\ufff8\021" +
    "\ufff8\052\174\001\002\000\004\041\175\001\002\000\010" +
    "\011\166\016\160\052\163\001\002\000\004\031\177\001" +
    "\002\000\014\010\ufff6\012\ufff6\017\ufff6\021\ufff6\052\ufff6" +
    "\001\002\000\010\011\166\016\160\052\163\001\002\000" +
    "\004\031\202\001\002\000\014\010\ufff5\012\ufff5\017\ufff5" +
    "\021\ufff5\052\ufff5\001\002\000\004\052\230\001\002\000" +
    "\010\010\uffef\017\uffef\021\205\001\002\000\004\052\221" +
    "\001\002\000\004\031\217\001\002\000\006\010\ufffd\017" +
    "\ufffd\001\002\000\004\031\211\001\002\000\022\010\ufffb" +
    "\011\ufffb\012\ufffb\016\ufffb\017\ufffb\021\ufffb\022\012\052" +
    "\ufffb\001\002\000\006\010\ufffe\017\015\001\002\000\004" +
    "\031\uffee\001\002\000\004\010\215\001\002\000\004\052" +
    "\216\001\002\000\004\031\uffed\001\002\000\010\010\uffef" +
    "\017\uffef\021\205\001\002\000\006\010\ufff0\017\ufff0\001" +
    "\002\000\006\031\uffea\033\222\001\002\000\010\012\224" +
    "\034\uffe7\052\230\001\002\000\004\031\uffec\001\002\000" +
    "\004\052\230\001\002\000\004\034\241\001\002\000\006" +
    "\031\237\034\uffe9\001\002\000\004\040\235\001\002\000" +
    "\006\032\231\040\uffd9\001\002\000\004\052\233\001\002" +
    "\000\004\040\uffdb\001\002\000\006\032\231\040\uffd9\001" +
    "\002\000\004\040\uffda\001\002\000\010\011\166\016\160" +
    "\052\163\001\002\000\006\031\uffe5\034\uffe5\001\002\000" +
    "\010\012\224\034\uffe7\052\230\001\002\000\004\034\uffe8" +
    "\001\002\000\004\031\uffeb\001\002\000\004\040\243\001" +
    "\002\000\010\011\166\016\160\052\163\001\002\000\006" +
    "\031\uffe6\034\uffe6\001\002\000\010\010\ufff4\017\ufff4\021" +
    "\ufff4\001\002\000\004\040\247\001\002\000\010\011\166" +
    "\016\160\052\163\001\002\000\004\031\251\001\002\000" +
    "\012\010\ufff1\017\ufff1\021\ufff1\052\230\001\002\000\010" +
    "\010\ufff2\017\ufff2\021\ufff2\001\002\000\004\040\262\001" +
    "\002\000\006\010\uffdd\031\256\001\002\000\004\010\261" +
    "\001\002\000\010\010\uffdf\031\uffdf\052\230\001\002\000" +
    "\006\010\uffdd\031\256\001\002\000\004\010\uffde\001\002" +
    "\000\012\010\uffe1\031\uffe1\034\uffe1\052\uffe1\001\002\000" +
    "\010\011\166\016\160\052\163\001\002\000\006\010\uffe0" +
    "\031\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\012\007\010\001\001\000\012\005\160\052\161\057" +
    "\164\060\163\001\001\000\004\010\146\001\001\000\004" +
    "\003\013\001\001\000\002\001\001\000\016\006\024\022" +
    "\025\024\020\025\023\030\022\032\016\001\001\000\010" +
    "\033\137\040\035\043\040\001\001\000\002\001\001\000" +
    "\010\033\122\040\035\043\040\001\001\000\004\023\116" +
    "\001\001\000\006\031\031\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\106\034\105\040\035\043" +
    "\040\001\001\000\010\033\041\040\035\043\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\034\001" +
    "\001\000\002\001\001\000\010\045\060\046\061\047\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\046\037\053\001\001\000\002\001\001\000\004\050\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\035\043\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\103\040\035\043\040\001\001\000\006\046\102\047" +
    "\062\001\001\000\006\041\077\044\073\001\001\000\004" +
    "\042\065\001\001\000\002\001\001\000\004\050\064\001" +
    "\001\000\002\001\001\000\006\046\072\047\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\100\046\061\047\062\001\001\000\006\041\077\044\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\110" +
    "\001\001\000\010\033\111\040\035\043\040\001\001\000" +
    "\002\001\001\000\004\035\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\115\040\035\043\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\024" +
    "\024\120\025\023\030\022\032\016\001\001\000\004\023" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\024\022\124\024\020\025\023\030\022\032\016\001" +
    "\001\000\004\027\125\001\001\000\004\026\134\001\001" +
    "\000\010\033\127\040\035\043\040\001\001\000\002\001" +
    "\001\000\016\006\024\022\131\024\020\025\023\030\022" +
    "\032\016\001\001\000\004\027\132\001\001\000\002\001" +
    "\001\000\016\006\024\022\136\024\020\025\023\030\022" +
    "\032\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\006\024\022\141" +
    "\024\020\025\023\030\022\032\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\151\040\035\043\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\155\040" +
    "\035\043\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\253\051\252\001\001\000\004\012\203\001" +
    "\001\000\004\011\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\166\040\035\043" +
    "\040\001\001\000\002\001\001\000\010\052\170\057\164" +
    "\060\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\052\175\057\164" +
    "\060\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\052\200\057\164\060\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\244\051\245\001\001\000" +
    "\01scopeStack.push(new Scope(5\205\017\207\0))01\001\000\002\001\001" +
    "\00procedure = 0\002\001\001\000\002\001\0
        module.add(res);
1\000\002\001\001\000" +
    "\010\004\211\007\010\016\212\001\001\000\004\003\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    
\001\000\002\001\001\000\010\014\217\015\205\017\207" +
    "\001\001\000\002\001\001\000\004\055\222\001\001\000" +
    "\010\051\226\053\225\054\224\001\001\000\002\001\001" +
    "\000\004\051\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\233\001\001\000" +
    "\002\001\001\000\010\052\235\057\164\060\163\001\001" +
    "\000\002\001\001\000\010\051\226\053\225\054\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\052\243\057\164\060\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\052\247" +
    "\057\164\060\163\001\001\000\002\001\001\000\006\013" +
    "\251\051\245\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\254\001\001\000\002\001\001\000\006\020" +
    "\256\051\252\001\001\000\004\021\257\001\001\000\002" +
    "\0000\002\001\001\000\010\052\262\057\164\060" +
    "\163\001\001\000\002\001\001" });

  /** Ao <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OberonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OberonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OberonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    OberonScanner s;
    int fcnt = 0;
    int ccnt = 0;
    HashMap<String, String> procedureMap = new HashMap<String, String>();
    HashMap<String, String> callSiteMap = new HashMap<String, String>();
    String currentProcedure = null;
    CallGraph graph = new CallGraph();
    OberonParser(OberonScanner s) { this.s = s; }
    String getTypes(String argv) {
        String[] s = argv.split(";");
        String res = "";
        for (int i = 0; i < s.length; ++i) {
            String[] ss = s[i].split(":");
            for (int j = 0; j < ss.length; ++j) {
                if (j % 2 == 1) {
                    if (res.length() != 0) {
                        res += ", ";
                    }
                    res += ss[j];
                }
            }
        }
        if (res.length() == 0) {
            return "()";
        } else if (res.charAt(res.length()-1) == ')') {
            return "(" + res.trim();
        } else {
            return "(" + res.trim() + ")";
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$OberonParser$actions {
  private final OberonParser parser;

  /** Constructor */
  CUP$OberonParser$actions(OberonParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$OberonParser$do_action_part00000000(
    int                        CUP$OberonParser$act_num,
    java_cup.runtime.lr_parser CUP$OberonParser$parser,
    java.util.Stack            CUP$OberonParser$stack,
    int                        CUP$OberonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OberonParser$result;

      /* select the action based on the action number */
      switch (CUP$OberonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module ::= MODULE IDENTIFIER SEMI declarations begin END IDENTIFIER DOT 
            {
              String RESULT =null;
		 for (int i = 0; i < ccnt; ++i) {
                                                                                                      graph.addEdge("c"+i, procedureMap.get(callSiteMap.get("c"+i)));
                                                                                                  }
                                                                                                  graph.show(); 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-7)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int start_valright = ((ja
a_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
        ring start_val = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		RESULT = start_val;
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$OberonParser$parser.done_parsing();
          return CUP$OberonParser$result;

          /.res += . . . . . . + "\n" . . . . . . .*/
          case 2: // begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("begin",1, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= 
            {
              String RESULT =null;

  
        pscopeStackapeek().addnew PrimitiveStatement(res));                CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("begin",1, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declaration type_declaration var_declaration procedure_declarations 
            res += tiveStatement(g SULT =null;
))
            res += assignment();getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            procedure.add(new Pri)     return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declaration ::= CONST const_expression SEMI 
            {
r
ng RESULWhile=nul
     wh
pression();
                iatemeWhile ifSmt expressresfStatemenres;P
        scopeStack.peek().add(whileSmt);$OberonParser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
        whileSmt.getLo
        scopeStack.push(new Scope(whileSmt.getLoopBody()));opBody().add(new PrimitiveStatement(         return CUP$))OberonParser$result;
  scopeSstatement_sequence();
        tack.pop();
ation ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
        res +=          return CUP$OberonParser$result;

        expression();
        res +=  . .
 .*/
   res += case st_expr
        ession ::= const_expression IDENTIFIER EQ expression SEMI 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("const_expression",6, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-4)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_expression ::= IDENTIFIER EQ expression 
            res +=          String R
            res += expression();
            res += esult = parsymbolFactory().newSymbol("const_expression",6, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          reo
            nParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= type type_expression 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type_declaration",3, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            res +=      return CUP$
beronParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type_declaration",3, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_expression ::= type_expression IDENTIFIER EQ type SEMI 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type_expression",7, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-4)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_expression ::= IDENTIFIER EQ type SEMI 
            {
              String RESUL
 =null;

      " " +         CUP$Obero + " "nParser$result = parser.getSymbolFactory().newSymbol("type_expression",7, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declaration ::= VAR var_expression 
            {
              String RESULT =null;

    
        System.out.println(res);          CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("var_declaration",8, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
P$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("var_declaration",8, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_expression ::= identifier_list COLON type SEMI var_expression 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("var_expression",9, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-4)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_expression ::= identifier_list COLON type SEMI 
            {
              String R ESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("var_expression",9, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_declarations ::= procedure_declaration SEMI procedure_declarations 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",10, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
         
  }
          return C + " "UP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declarations ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",10, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_declaration ::= procedure_heading SEMI procedure_body 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",11, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_body ::= declarations begin END IDENTIFIER 
            {
              String R ESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_body",12, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
     + " "          String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)( (java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String fs = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 currentProcedure = i; graph.addProcedure("f"+fcnt, i+getTypes(fs)); procedureMap.put(i, "f"+fcnt); ++fcnt; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_heading",13, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: + " " // formal_parameters ::= LEFTP fp_sections RIGHTP 
            {
              String RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		 RESULT = "(" + fps + ")"; 
         CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("formal_parameters",43, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("formal_parameters",43, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fp_sections ::= fp_section 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = fp; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fp_sections ::= fp_section SEMI fp_sections 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = fp + "; " + fps; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_sections ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fp_section ::= VAR identifier_list COLON type 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = "VAR " + is + ": " + t; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("fp_section",41, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fp_section ::= identifier_list COLON type 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = is + ": " + t; 

class Scope {
    Procedure procedure;
    StatementSequence smtSequence;
    
    public Scope(Procedure p) {
        procedure = p;
    }

    public Scope(StatementSequence s) {
        smtSequence = s;
    }

    public add(PrimiAbstractStatement         if void (procedure != null) {
            procedure.add(p);
        } else {
            smtSequence.add(p);
        }
    }
}              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("fp_section",41, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = at; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = rt; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_type ::= RECORD field_list field_list_with_semi END 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int flsleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String fls = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		 RESULT = "RECORD " + fl + " " + fls + " END"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("record_type",46, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_list ::= identifier_list COLON type 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("field_list",14, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_list ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("field_list",14, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_list_with_semi ::= SEMI field_list field_list_with_semi 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("field_list_with_semi",15, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_list_with_semi ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("field_list_with_semi",15, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = "ARRAY " + e + " OF " + t; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("array_type",45, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identifier_list ::= IDENTIFIER identifier_list_with 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = i + is; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("identifier_list",39, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifier_list_with ::= COMMA IDENTIFIER identifier_list_with 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = ", " + i + is; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("identifier_list_with",44, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("identifier_list_with",44, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_sequence ::= statement statement_with_semi 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement_sequence",16, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_with_semi ::= SEMI statement statement_with_semi 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement_with_semi",17, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_with_semi ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement_with_semi",17, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= assignment 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= procedure_call 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= if_statement 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= while_statement 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-4)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("if_statement",4, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-6)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // elsif_statement ::= ELSIF expression THEN statement_sequence elsif_statement 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("elsif_statement",21, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-4)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elsif_statement ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("elsif_statement",21, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // else_statement ::= ELSE statement_sequence 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("else_statement",20, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_statement ::= 
            {
              String RESULT =null;

              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("else_statement",20, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 graph.addCallSite("c"+ccnt, currentProcedure+"()", i + a + ";"); callSiteMap.put("c"+ccnt, i); ++ccnt; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_call",22, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // procedure_call ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 graph.addCallSite("c"+ccnt, currentProcedure, i); callSiteMap.put("c"+ccnt, i); ++ccnt; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("procedure_call",22, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // actual_parameters ::= LEFTP expression_list RIGHTP 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		 RESULT = "(" + el + ")"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("actual_parameters",23, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = i + s + ":=" + e; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= simple_expression comp_expression 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = se + ce; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_list ::= expression expression_list_with 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int elwleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int elwright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String elw = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = e + elw; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_list ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_list_with ::= COMMA expression expression_list_with 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int elwleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int elwright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String elw = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = ", " + e + elw; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("expression_list_with",27, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("expression_list_with",27, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comp ::= EQ 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comp ::= NE 
            {
              String RESULT =null;
		 RESULT = "#"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comp ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // comp ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comp ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comp ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comp_expression ::= comp simple_expression 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = c + se; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp_expression",29, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comp_expression ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("comp_expression",29, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binary_low ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binary_low ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binary_low ::= OR 
            {
              String RESULT =null;
		 RESULT = "OR"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binary_mid ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_mid ::= DIV 
            {
              String RESULT =null;
		 RESULT = "DIV"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_mid ::= MOD 
            {
              String RESULT =null;
		 RESULT = "MOD"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binary_mid ::= AND 
            {
              String RESULT =null;
		 RESULT = "&"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // simple_expression ::= unary term term_list_with 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = u + t + tl; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("simple_expression",33, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term_list_with ::= binary_low term term_list_with 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = b + t + tl; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("term_list_with",34, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("term_list_with",34, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= factor binary_mid factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String bm = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = f1 + bm + f2; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = f; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = i + s; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= number 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = n; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= LEFTP expression RIGHTP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		 RESULT = "(" + e + ")"; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NOT factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = "~" + f; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // number ::= INTEGER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("number",37, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // selector ::= DOT IDENTIFIER selector 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = "." + i + s; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // selector ::= LEFTB expression RIGHTB selector 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$OberonParser$stack.peek()).value;
		 RESULT = "[" + e + "]" + s; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.elementAt(CUP$OberonParser$top-3)), ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // selector ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$OberonParser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$OberonParser$stack.peek()), RESULT);
            }
          return CUP$OberonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$OberonParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$OberonParser$do_action(
    int                        CUP$OberonParser$act_num,
    java_cup.runtime.lr_parser CUP$OberonParser$parser,
    java.util.Stack            CUP$OberonParser$stack,
    int                        CUP$OberonParser$top)
    throws java.lang.Exception
    {
              return CUP$OberonParser$do_action_part00000000(
                               CUP$OberonParser$act_num,
                               CUP$OberonParser$parser,
                               CUP$OberonParser$stack,
                               CUP$OberonParser$top);
    }
}

}
