
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import callgraph.*;
import exceptions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\007\005" +
    "\000\002\007\002\000\002\010\007\000\002\010\005\000" +
    "\002\005\004\000\002\005\002\000\002\011\007\000\002" +
    "\011\006\000\002\012\004\000\002\012\002\000\002\013" +
    "\007\000\002\013\006\000\002\014\005\000\002\014\002" +
    "\000\002\015\005\000\002\016\006\000\002\017\005\000" +
    "\002\055\005\000\002\061\002\000\002\055\006\000\002" +
    "\055\002\000\002\054\003\000\002\054\005\000\002\054" +
    "\002\000\002\053\006\000\002\053\005\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\060\006\000" +
    "\002\020\005\000\002\020\002\000\002\021\005\000\002" +
    "\021\002\000\002\057\006\000\002\051\004\000\002\056" +
    "\005\000\002\056\002\000\002\022\004\000\002\023\005" +
    "\000\002\023\002\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\002\000\002" +
    "\025\007\000\002\006\011\000\002\027\007\000\002\027" +
    "\002\000\002\026\004\000\002\026\002\000\002\030\004" +
    "\000\002\030\003\000\002\031\005\000\002\062\002\000" +
    "\002\031\006\000\002\032\006\000\002\033\004\000\002" +
    "\034\004\000\002\034\002\000\002\035\005\000\002\035" +
    "\002\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\004\000\002\037\002\000\002\040\003\000\002" +
    "\040\003\000\002\040\002\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\005\000" +
    "\002\044\005\000\002\044\002\000\002\045\005\000\002" +
    "\063\002\000\002\045\006\000\002\045\003\000\002\046" +
    "\004\000\002\046\003\000\002\046\005\000\002\064\002" +
    "\000\002\046\006\000\002\046\004\000\002\047\003\000" +
    "\002\050\005\000\002\050\006\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\020\004\001\002\000\004\052\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\031\010\001\002\000\022\010\ufffb\011\ufffb\012" +
    "\ufffb\016\ufffb\017\ufffb\021\ufffb\022\012\052\ufffb\001\002" +
    "\000\020\010\ufff7\011\201\012\ufff7\016\173\017\ufff7\021" +
    "\ufff7\052\176\001\002\000\004\052\163\001\002\000\006" +
    "\010\ufffe\017\015\001\002\000\004\010\157\001\002\000" +
    "\014\004\020\010\uffcf\014\016\031\uffcf\052\022\001\002" +
    "\000\020\003\uffb3\026\040\027\041\033\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\001\002\000\012\005\uffd3\006\uffd3\010\uffd3" +
    "\031\uffd3\001\002\000\020\003\uffb3\026\040\027\041\033" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\012\005\uffd4" +
    "\006\uffd4\010\uffd4\031\132\001\002\000\024\003\031\005" +
    "\uffc7\006\uffc7\010\uffc7\031\uffc7\033\030\035\032\037\034" +
    "\047\uff9b\001\002\000\012\005\uffd2\006\uffd2\010\uffd2\031" +
    "\uffd2\001\002\000\012\005\uffd0\006\uffd0\010\uffd0\031\uffd0" +
    "\001\002\000\012\005\uffd1\006\uffd1\010\uffd1\031\uffd1\001" +
    "\002\000\004\010\uffff\001\002\000\004\047\130\001\002" +
    "\000\022\003\uffb3\026\040\027\041\033\uffb3\034\uffc0\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\022\003\uffc5\026\uffc5" +
    "\027\uffc5\033\uffc5\034\uffc5\051\uffc5\052\uffc5\053\uffc5\001" +
    "\002\000\020\003\uffb3\026\040\027\041\033\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\012\005\uffc8\006\uffc8\010" +
    "\uffc8\031\uffc8\001\002\000\004\052\035\001\002\000\072" +
    "\003\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\013\uff9b\015" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\034\uff9b\035\032\036\uff9b\037\034\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\052\uff9b\001\002\000\066\003\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\013\uff9d\015\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\034" +
    "\uff9d\036\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\052\uff9d\001\002\000\014\003" +
    "\062\033\060\051\061\052\065\053\057\001\002\000\014" +
    "\003\uffb5\033\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000" +
    "\014\003\uffb4\033\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002" +
    "\000\044\005\uffb6\006\uffb6\007\uffb6\010\uffb6\013\uffb6\015" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6\041\047\042\054" +
    "\043\046\044\052\045\050\046\053\052\uffb6\001\002\000" +
    "\004\036\044\001\002\000\072\003\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\013\uff9b\015\uff9b\023\uff9b\024\uff9b\025" +
    "\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b" +
    "\035\032\036\uff9b\037\034\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\001\002" +
    "\000\066\003\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\013" +
    "\uff9c\015\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\034\uff9c\036\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\052\uff9c\001\002\000\020\003\uffbb\026\uffbb\027\uffbb\033" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000\020\003\uffbd" +
    "\026\uffbd\027\uffbd\033\uffbd\051\uffbd\052\uffbd\053\uffbd\001" +
    "\002\000\020\003\uffb9\026\uffb9\027\uffb9\033\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\001\002\000\020\003\uffb3\026\040\027" +
    "\041\033\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\020" +
    "\003\uffba\026\uffba\027\uffba\033\uffba\051\uffba\052\uffba\053" +
    "\uffba\001\002\000\020\003\uffb8\026\uffb8\027\uffb8\033\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\001\002\000\020\003\uffbc\026" +
    "\uffbc\027\uffbc\033\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002" +
    "\000\030\005\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2\015" +
    "\uffc2\031\uffc2\032\uffc2\034\uffc2\036\uffc2\052\uffc2\001\002" +
    "\000\030\005\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7\015" +
    "\uffb7\031\uffb7\032\uffb7\034\uffb7\036\uffb7\052\uffb7\001\002" +
    "\000\064\003\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\013" +
    "\uff9e\015\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\052\uff9e" +
    "\001\002\000\020\003\uffb3\026\040\027\041\033\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\014\003\062\033\060" +
    "\051\061\052\065\053\057\001\002\000\020\003\uffa1\026" +
    "\uffa1\027\uffa1\033\uffa1\051\uffa1\052\uffa1\053\uffa1\001\002" +
    "\000\064\003\101\005\uffa5\006\uffa5\007\uffa5\010\uffa5\013" +
    "\uffa5\015\uffa5\023\100\024\103\025\uffa5\026\uffa5\027\uffa5" +
    "\030\104\031\uffa5\032\uffa5\034\uffa5\036\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\102\052\uffa5" +
    "\001\002\000\052\005\uffa9\006\uffa9\007\uffa9\010\uffa9\013" +
    "\uffa9\015\uffa9\025\073\026\071\027\072\031\uffa9\032\uffa9" +
    "\034\uffa9\036\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\052\uffa9\001\002\000\070\003\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\013\uff9b\015\uff9b\023\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b" +
    "\034\uff9b\035\032\036\uff9b\037\034\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\052\uff9b\001\002" +
    "\000\064\003\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\013" +
    "\uffa3\015\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\034\uffa3\036\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\052\uffa3" +
    "\001\002\000\064\003\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\013\uffa4\015\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\036\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4" +
    "\052\uffa4\001\002\000\044\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\013\uffab\015\uffab\031\uffab\032\uffab\034\uffab\036\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\052" +
    "\uffab\001\002\000\014\003\uffb2\033\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\001\002\000\014\003\uffb1\033\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\001\002\000\014\003\uffb0\033\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\001\002\000\014\003\062\033\060\051" +
    "\061\052\065\053\057\001\002\000\052\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\013\uffa9\015\uffa9\025\073\026\071\027" +
    "\072\031\uffa9\032\uffa9\034\uffa9\036\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\052\uffa9\001\002\000" +
    "\044\005\uffaa\006\uffaa\007\uffaa\010\uffaa\013\uffaa\015\uffaa" +
    "\031\uffaa\032\uffaa\034\uffaa\036\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\052\uffaa\001\002\000\014" +
    "\003\062\033\060\051\061\052\065\053\057\001\002\000" +
    "\014\003\uffad\033\uffad\051\uffad\052\uffad\053\uffad\001\002" +
    "\000\014\003\uffa7\033\uffa7\051\uffa7\052\uffa7\053\uffa7\001" +
    "\002\000\014\003\uffac\033\uffac\051\uffac\052\uffac\053\uffac" +
    "\001\002\000\014\003\uffae\033\uffae\051\uffae\052\uffae\053" +
    "\uffae\001\002\000\014\003\uffaf\033\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\001\002\000\014\003\062\033\060\051\061\052" +
    "\065\053\057\001\002\000\052\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\013\uffa6\015\uffa6\025\uffa6\026\uffa6\027\uffa6\031" +
    "\uffa6\032\uffa6\034\uffa6\036\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\052\uffa6\001\002\000\052\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\013\uffa8\015\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\031\uffa8\032\uffa8\034\uffa8\036\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\052\uffa8" +
    "\001\002\000\020\003\uffb3\026\040\027\041\033\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\004\034\112\001\002" +
    "\000\064\003\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\013" +
    "\uffa0\015\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\034\uffa0\036\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\052\uffa0" +
    "\001\002\000\064\003\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\013\uff9f\015\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f\036\uff9f\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f" +
    "\052\uff9f\001\002\000\004\034\115\001\002\000\064\003" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\013\uffa2\015\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\034\uffa2\036\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\050\uffa2\052\uffa2\001\002\000" +
    "\022\003\uffb3\026\040\027\041\033\uffb3\034\uffc0\051\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\004\034\125\001\002\000" +
    "\006\032\121\034\uffbe\001\002\000\020\003\uffb3\026\040" +
    "\027\041\033\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000" +
    "\004\034\uffc1\001\002\000\006\032\121\034\uffbe\001\002" +
    "\000\004\034\uffbf\001\002\000\012\005\uffc4\006\uffc4\010" +
    "\uffc4\031\uffc4\001\002\000\004\034\127\001\002\000\012" +
    "\005\uffc6\006\uffc6\010\uffc6\031\uffc6\001\002\000\020\003" +
    "\uffb3\026\040\027\041\033\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\001\002\000\012\005\uffc3\006\uffc3\010\uffc3\031\uffc3\001" +
    "\002\000\020\004\020\005\uffcf\006\uffcf\010\uffcf\014\016" +
    "\031\uffcf\052\022\001\002\000\010\005\uffd6\006\uffd6\010" +
    "\uffd6\001\002\000\012\005\uffd4\006\uffd4\010\uffd4\031\132" +
    "\001\002\000\010\005\uffd5\006\uffd5\010\uffd5\001\002\000" +
    "\004\007\137\001\002\000\020\004\020\005\uffcf\006\uffcf" +
    "\010\uffcf\014\016\031\uffcf\052\022\001\002\000\010\005" +
    "\uffcb\006\142\010\uffcb\001\002\000\006\005\147\010\uffc9" +
    "\001\002\000\020\003\uffb3\026\040\027\041\033\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\001\002\000\004\007\144\001\002" +
    "\000\020\004\020\005\uffcf\006\uffcf\010\uffcf\014\016\031" +
    "\uffcf\052\022\001\002\000\010\005\uffcb\006\142\010\uffcb" +
    "\001\002\000\006\005\uffcc\010\uffcc\001\002\000\014\004" +
    "\020\010\uffcf\014\016\031\uffcf\052\022\001\002\000\004" +
    "\010\151\001\002\000\012\005\uffcd\006\uffcd\010\uffcd\031" +
    "\uffcd\001\002\000\004\010\uffca\001\002\000\004\015\154" +
    "\001\002\000\014\004\020\010\uffcf\014\016\031\uffcf\052" +
    "\022\001\002\000\004\010\156\001\002\000\012\005\uffce" +
    "\006\uffce\010\uffce\031\uffce\001\002\000\004\052\160\001" +
    "\002\000\004\037\161\001\002\000\004\002\001\001\002" +
    "\000\006\031\166\052\167\001\002\000\004\041\164\001" +
    "\002\000\020\003\uffb3\026\040\027\041\033\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\001\002\000\006\031\ufff9\052\ufff9\001" +
    "\002\000\020\010\ufffc\011\ufffc\012\ufffc\016\ufffc\017\ufffc" +
    "\021\ufffc\052\ufffc\001\002\000\004\041\170\001\002\000" +
    "\020\003\uffb3\026\040\027\041\033\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\001\002\000\004\031\172\001\002\000\006\031" +
    "\ufffa\052\ufffa\001\002\000\010\010\uffdd\031\uffdd\052\245" +
    "\001\002\000\012\010\ufff3\012\216\017\ufff3\021\ufff3\001" +
    "\002\000\004\052\205\001\002\000\012\010\uffe2\031\uffe2" +
    "\034\uffe2\052\uffe2\001\002\000\012\010\uffe0\031\uffe0\034" +
    "\uffe0\052\uffe0\001\002\000\012\010\uffe1\031\uffe1\034\uffe1" +
    "\052\uffe1\001\002\000\020\003\uffb3\026\040\027\041\033" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\004\013\203" +
    "\001\002\000\010\011\201\016\173\052\176\001\002\000" +
    "\012\010\uffda\031\uffda\034\uffda\052\uffda\001\002\000\004" +
    "\041\213\001\002\000\014\010\ufff8\012\ufff8\017\ufff8\021" +
    "\ufff8\052\207\001\002\000\004\041\210\001\002\000\010" +
    "\011\201\016\173\052\176\001\002\000\004\031\212\001" +
    "\002\000\014\010\ufff6\012\ufff6\017\ufff6\021\ufff6\052\ufff6" +
    "\001\002\000\010\011\201\016\173\052\176\001\002\000" +
    "\004\031\215\001\002\000\014\010\ufff5\012\ufff5\017\ufff5" +
    "\021\ufff5\052\ufff5\001\002\000\004\052\245\001\002\000" +
    "\010\010\uffef\017\uffef\021\220\001\002\000\004\052\234" +
    "\001\002\000\004\031\232\001\002\000\006\010\ufffd\017" +
    "\ufffd\001\002\000\004\031\224\001\002\000\022\010\ufffb" +
    "\011\ufffb\012\ufffb\016\ufffb\017\ufffb\021\ufffb\022\012\052" +
    "\ufffb\001\002\000\006\010\ufffe\017\015\001\002\000\004" +
    "\031\uffee\001\002\000\004\010\230\001\002\000\004\052" +
    "\231\001\002\000\004\031\uffed\001\002\000\010\010\uffef" +
    "\017\uffef\021\220\001\002\000\006\010\ufff0\017\ufff0\001" +
    "\002\000\010\003\237\031\uffe8\033\235\001\002\000\010" +
    "\012\241\034\uffe5\052\245\001\002\000\004\031\uffec\001" +
    "\002\000\010\012\uffea\034\uffea\052\uffea\001\002\000\010" +
    "\012\241\034\uffe5\052\245\001\002\000\004\052\245\001" +
    "\002\000\004\034\256\001\002\000\006\031\254\034\uffe7" +
    "\001\002\000\004\040\252\001\002\000\006\032\246\040" +
    "\uffd7\001\002\000\004\052\250\001\002\000\004\040\uffd9" +
    "\001\002\000\006\032\246\040\uffd7\001\002\000\004\040" +
    "\uffd8\001\002\000\010\011\201\016\173\052\176\001\002" +
    "\000\006\031\uffe3\034\uffe3\001\002\000\010\012\241\034" +
    "\uffe5\052\245\001\002\000\004\034\uffe6\001\002\000\004" +
    "\031\uffe9\001\002\000\004\040\260\001\002\000\010\011" +
    "\201\016\173\052\176\001\002\000\006\031\uffe4\034\uffe4" +
    "\001\002\000\004\034\263\001\002\000\004\031\uffeb\001" +
    "\002\000\010\010\ufff4\017\ufff4\021\ufff4\001\002\000\004" +
    "\040\266\001\002\000\010\011\201\016\173\052\176\001" +
    "\002\000\004\031\270\001\002\000\012\010\ufff1\017\ufff1" +
    "\021\ufff1\052\245\001\002\000\010\010\ufff2\017\ufff2\021" +
    "\ufff2\001\002\000\004\040\301\001\002\000\006\010\uffdb" +
    "\031\275\001\002\000\004\010\300\001\002\000\010\010" +
    "\uffdd\031\uffdd\052\245\001\002\000\006\010\uffdb\031\275" +
    "\001\002\000\004\010\uffdc\001\002\000\012\010\uffdf\031" +
    "\uffdf\034\uffdf\052\uffdf\001\002\000\010\011\201\016\173" +
    "\052\176\001\002\000\006\010\uffde\031\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\012\007\010\001\001\000\012\005\173\052\174\057" +
    "\177\060\176\001\001\000\004\010\161\001\001\000\004" +
    "\003\013\001\001\000\002\001\001\000\016\006\024\022" +
    "\025\024\020\025\023\030\022\032\016\001\001\000\010" +
    "\033\152\040\036\043\041\001\001\000\002\001\001\000" +
    "\010\033\135\040\036\043\041\001\001\000\004\023\132" +
    "\001\001\000\006\031\032\050\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\117\034\125\040\036\043" +
    "\041\001\001\000\004\062\115\001\001\000\010\033\042" +
    "\040\036\043\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\035\001\001\000\002\001\001\000\010" +
    "\045\063\046\062\047\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\050\037\054\001\001\000\002" +
    "\001\001\000\004\050\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\036\043\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\113\040\036\043\041\001" +
    "\001\000\006\046\112\047\065\001\001\000\004\064\107" +
    "\001\001\000\004\042\076\001\001\000\006\041\073\044" +
    "\067\001\001\000\004\050\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\074\046\062" +
    "\047\065\001\001\000\006\041\073\044\075\001\001\000" +
    "\002\001\001\000\006\046\106\047\065\001\001\000\002" +
    "\001\001\000\004\063\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\105\047\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\110\040\036\043\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\117\034\116\040\036\043\041\001\001" +
    "\000\002\001\001\000\004\035\121\001\001\000\010\033" +
    "\122\040\036\043\041\001\001\000\002\001\001\000\004" +
    "\035\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\130\040\036" +
    "\043\041\001\001\000\002\001\001\000\014\006\024\024" +
    "\133\025\023\030\022\032\016\001\001\000\002\001\001" +
    "\000\004\023\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\024\022\137\024\020\025\023\030\022" +
    "\032\016\001\001\000\004\027\140\001\001\000\004\026" +
    "\147\001\001\000\010\033\142\040\036\043\041\001\001" +
    "\000\002\001\001\000\016\006\024\022\144\024\020\025" +
    "\023\030\022\032\016\001\001\000\004\027\145\001\001" +
    "\000\002\001\001\000\016\006\024\022\151\024\020\025" +
    "\023\030\022\032\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\024\022\154\024\020\025\023\030\022\032\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\164\040\036\043\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\170\040\036\043\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\272\051\271\001\001\000\004" +
    "\012\216\001\001\000\004\011\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\201" +
    "\040\036\043\041\001\001\000\002\001\001\000\010\052" +
    "\203\057\177\060\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\210\057\177\060\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\213\057\177\060\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\263\051\264" +
    "\001\001\000\010\014\221\015\220\017\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\224\007\010\016\225\001\001\000" +
    "\004\003\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\232\015" +
    "\220\017\222\001\001\000\002\001\001\000\004\055\235" +
    "\001\001\000\010\051\243\053\242\054\261\001\001\000" +
    "\002\001\001\000\004\061\237\001\001\000\010\051\243" +
    "\053\242\054\241\001\001\000\004\051\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\250\001\001\000\002\001\001\000\010\052\252" +
    "\057\177\060\176\001\001\000\002\001\001\000\010\051" +
    "\243\053\242\054\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\052\260\057\177\060" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\266\057\177\060\176\001\001\000\002\001\001\000\006" +
    "\013\270\051\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\273\001\001\000\002\001\001\000\006" +
    "\020\275\051\271\001\001\000\004\021\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\052\301\057\177" +
    "\060\176\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    OberonScanner s;
    int fcnt = 0;
    int ccnt = 0;
    HashMap<String, String> procedureMap = new HashMap<String, String>();
    HashMap<String, String> callSiteMap = new HashMap<String, String>();
    String currentProcedure = null;
    CallGraph graph = new CallGraph();
    Parser(OberonScanner s) { this.s = s; }
    String getTypes(String argv) {
        String[] s = argv.split(";");
        String res = "";
        for (int i = 0; i < s.length; ++i) {
            String[] ss = s[i].split(":");
            for (int j = 0; j < ss.length; ++j) {
                if (j % 2 == 1) {
                    if (res.length() != 0) {
                        res += ", ";
                    }
                    res += ss[j];
                }
            }
        }
        if (res.length() == 0) {
            return "()";
        } else if (res.charAt(res.length()-1) == ')') {
            return "(" + res.trim();
        } else {
            return "(" + res.trim() + ")";
        }
    }
    void parserError(OberonException e) throws OberonException {
        throw e;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module ::= MODULE IDENTIFIER SEMI declarations begin END IDENTIFIER DOT 
            {
              String RESULT =null;
		 for (int i = 0; i < ccnt; ++i) {
                                                                                                      graph.addEdge("c"+i, procedureMap.get(callSiteMap.get("c"+i)));
                                                                                                  }
                                                                                                  // graph.show(); 
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= BEGIN statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declaration type_declaration var_declaration procedure_declarations 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declaration ::= CONST const_expression SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declaration ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_expression ::= const_expression IDENTIFIER EQ expression SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_expression ::= IDENTIFIER EQ expression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= type type_expression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_expression ::= type_expression IDENTIFIER EQ type SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_expression ::= IDENTIFIER EQ type SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declaration ::= VAR var_expression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declaration ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_expression ::= identifier_list COLON type SEMI var_expression 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_expression ::= identifier_list COLON type SEMI 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_declarations ::= procedure_declaration SEMI procedure_declarations 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declarations ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declarations",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_declaration ::= procedure_heading SEMI procedure_body 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_body ::= declarations begin END IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fs = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 currentProcedure = i; graph.addProcedure("f"+fcnt, i+getTypes(fs)); procedureMap.put(i, "f"+fcnt); ++fcnt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameters ::= LEFTP fp_sections RIGHTP 
            {
              String RESULT =null;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + fps + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              String RESULT =null;
 parserError(new MissingLeftParenthesisException("hhhh")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formal_parameters ::= error NT$0 fp_sections RIGHTP 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formal_parameters ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_sections ::= fp_section 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fp_sections ::= fp_section SEMI fp_sections 
            {
              String RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fpsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fpsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fps = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fp + "; " + fps; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fp_sections ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_sections",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fp_section ::= VAR identifier_list COLON type 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "VAR " + is + ": " + t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fp_section ::= identifier_list COLON type 
            {
              String RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = is + ": " + t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fp_section",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = at; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // record_type ::= RECORD field_list field_list_with_semi END 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int flsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String fls = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "RECORD " + fl + " " + fls + " END"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_list ::= identifier_list COLON type 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_list ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_list_with_semi ::= SEMI field_list field_list_with_semi 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_with_semi",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_list_with_semi ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_with_semi",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "ARRAY " + e + " OF " + t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier_list ::= IDENTIFIER identifier_list_with 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i + is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier_list_with ::= COMMA IDENTIFIER identifier_list_with 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + i + is; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_with",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identifier_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list_with",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_sequence ::= statement statement_with_semi 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement_with_semi ::= SEMI statement statement_with_semi 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_with_semi",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_with_semi ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_with_semi",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= assignment 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= procedure_call 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= if_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= while_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elsif_statement ::= ELSIF expression THEN statement_sequence elsif_statement 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elsif_statement ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_statement ::= ELSE statement_sequence 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else_statement ::= 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 graph.addCallSite("c"+ccnt, currentProcedure+"()", i + a + ";"); callSiteMap.put("c"+ccnt, i); ++ccnt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // procedure_call ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 graph.addCallSite("c"+ccnt, currentProcedure, i); callSiteMap.put("c"+ccnt, i); ++ccnt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // actual_parameters ::= LEFTP expression_list RIGHTP 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + el + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$1 ::= 
            {
              String RESULT =null;
 parserError(new MissingLeftParenthesisException("hhh")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // actual_parameters ::= error NT$1 expression_list RIGHTP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i + s + ":=" + e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= simple_expression comp_expression 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ce = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = se + ce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_list ::= expression expression_list_with 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e + elw; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_list ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_list_with ::= COMMA expression expression_list_with 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elw = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ", " + e + elw; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_with",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_with",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // comp ::= EQ 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // comp ::= NE 
            {
              String RESULT =null;
		 RESULT = "#"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // comp ::= LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comp ::= LE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comp ::= GT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comp ::= GE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // comp_expression ::= comp simple_expression 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c + se; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // comp_expression ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp_expression",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binary_low ::= PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binary_low ::= MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binary_low ::= OR 
            {
              String RESULT =null;
		 RESULT = "OR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_low",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binary_mid ::= TIMES 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binary_mid ::= DIV 
            {
              String RESULT =null;
		 RESULT = "DIV"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binary_mid ::= MOD 
            {
              String RESULT =null;
		 RESULT = "MOD"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binary_mid ::= AND 
            {
              String RESULT =null;
		 RESULT = "&"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_mid",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // simple_expression ::= unary term term_list_with 
            {
              String RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = u + t + tl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // term_list_with ::= binary_low term term_list_with 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String tl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b + t + tl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list_with",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term_list_with ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term_list_with",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= factor binary_mid factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String bm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f1 + bm + f2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$2 ::= 
            {
              String RESULT =null;
 parserError(new MissingOperatorException("aaa")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= factor error NT$2 factor 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i + s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= number 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= LEFTP expression RIGHTP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "(" + e + ")"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$3 ::= 
            {
              String RESULT =null;
 parserError(new MissingLeftParenthesisException("hh")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= error NT$3 expression RIGHTP 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= NOT factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "~" + f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // number ::= INTEGER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // selector ::= DOT IDENTIFIER selector 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "." + i + s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // selector ::= LEFTB expression RIGHTB selector 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "[" + e + "]" + s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // selector ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
